// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token           String?  @db.Text
  access_token            String?  @db.Text
  expires_at              Int?
  token_type              String?
  scope                   String?
  id_token               String?  @db.Text
  session_state          String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  coffeeLog     CoffeeLog[]
  posts         Post[]
  logs          Log[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CoffeeLog {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  
  roastName     String
  origin        String?
  roastLevel    String?
  brewMethod    String?
  tastingNotes  String?
  rating        Float?
  
  isPublic      Boolean   @default(false)
  
  posts         Post[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Post {
  id            String    @id @default(cuid())
  title         String
  content       String
  
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  
  coffeeLogId   String?
  coffeeLog     CoffeeLog? @relation(fields: [coffeeLogId], references: [id])
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Log {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  beanName    String
  roastLevel  String
  grindSize   Int
  brewMethod  String
  temperature Int
  ratio       String
  time        Int
  notes       String?  @db.Text
  rating      Int

  @@index([userId])
}