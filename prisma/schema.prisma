// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  refresh_token_expires_in Int?
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  logs          Log[]
  beans         Bean[]
  brewMethods   BrewMethod[]
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  bookmarks     Bookmark[]
  followers     Follow[]    @relation("UserFollowers")
  following     Follow[]    @relation("UserFollowing")
  notifications Notification[] @relation("UserNotifications")
  actions       Notification[] @relation("UserActions")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bean {
  id          String   @id @default(cuid())
  name        String
  roastLevel  String
  origin      String?
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs        Log[]

  @@index([userId])
}

model BrewMethod {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs        Log[]

  @@index([userId])
}

model Log {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  beanId        String
  bean          Bean     @relation(fields: [beanId], references: [id])
  methodId      String
  method        BrewMethod @relation(fields: [methodId], references: [id])
  
  // Bean details
  beanOrigin      String?
  beanRegion      String?
  beanFarm        String?
  beanAltitude    String?
  beanProcess     String?
  beanVariety     String?
  beanRoastLevel  String?
  beanRoastDate   DateTime?
  beanDescription String?   @db.Text
  
  // Grinder settings
  grinderType   String?    // Grinder model (e.g., "EK43", "Comandante")
  grindSize     Int       // Grinder-specific scale number
  
  // Brewing parameters
  temperature   Decimal   @db.Decimal(4,1)  // Celsius, e.g., 92.5
  doseIn        Decimal   @db.Decimal(4,1)  // Coffee dose in grams
  doseOut       Decimal   @db.Decimal(4,1)  // Water/yield in grams/ml
  ratio         Decimal   @db.Decimal(4,2)  // Calculated ratio (e.g., 16.67 for 1:16.67)
  timeSeconds   Int       // Total seconds (e.g., 150 for 2:30)
  
  // Results
  tds          Decimal?  @db.Decimal(4,2)  // Total Dissolved Solids %
  extractionYield Decimal?  @db.Decimal(4,2)  // Extraction yield %
  
  // Equipment
  waterType    String?   // Type of water used
  filterType   String?   // Filter paper type
  
  // Notes
  notes        String?   @db.Text
  improvements String?   @db.Text
  rating       Int       @default(0)
  
  // Relations
  posts        Post[]

  @@index([userId])
  @@index([beanId])
  @@index([methodId])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     String    @db.Text
  published   Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  logId       String?
  user        User      @relation(fields: [userId], references: [id])
  log         Log?      @relation(fields: [logId], references: [id])
  comments    Comment[]
  likes       Like[]
  bookmarks   Bookmark[]
  notifications Notification[]

  @@index([userId])
  @@index([logId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  notifications Notification[]

  @@index([userId])
  @@index([postId])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Bookmark {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Follow {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  followerId  String
  followingId String
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id])
  following   User     @relation("UserFollowing", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Notification {
  id        String   @id @default(cuid())
  type      NotificationType
  userId    String
  actorId   String
  postId    String?
  commentId String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  actor     User     @relation("UserActions", fields: [actorId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([actorId])
  @@index([postId])
  @@index([commentId])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}